/*LINKED LIST ASSIGNMENT NO.3*/
#include<stdio.h>#include<conio.h>#include<stdlib.h>
typedef struct
{int data;struct  node *next;}node;
void display(node *h);
void insanypos(node *h,int n);
void reverseprint(node *h);
void mergelinks(node *h,node *i);
void linksearch(node *h,int n);
void delet(node *h,int n);
void sortll(node *h);void reverse(node *h);
void main(){node *head,*p,*q,*head1,*p1,*q1;int i,j,n,po,e,d,a;static int N;clrscr();
printf("Enter 1st element\n");head=(node*)malloc(sizeof(node));scanf("%d",&head->data);
head->next=NULL;q=head;printf("How many extra elements\n");scanf("%d",&N);
printf("Enter %d elements\n",N);
for(i=1;i<=N;i++)
 {p=(node*)malloc(sizeof(node));scanf("%d",&p->data);p->next=NULL;q->next=p;q=p;}
 do{
printf("\nType 0 to exit\nType 1 to display\nType 2 enter element at any position\nType 3 to reverse print it\nType 4 to merge another linked list with it\nType 5 to search a value\nType 6 to delete a particular element\nType 7 to sort data\nType 8 to reverse it\n");scanf("%d",&j);if(j==0){break;}else if(j==1){display(head);}
else if(j==2){printf("Enter position(less than %d)\n",N+2);scanf("%d",&po);insanypos(head,po);}
else if(j==3){reverseprint(head);}else if(j==4){printf("Creating another linked list\n");
printf("Enter 1st element\n");head1=(node*)malloc(sizeof(node));scanf("%d",&head1->data);
head1->next=NULL;q1=head1;printf("How many extra elements\n");scanf("%d",&a);
printf("Enter %d elements\n",a);
for(i=1;i<=a;i++)
 {p1=(node*)malloc(sizeof(node)); scanf("%d",&p1->data); p1->next=NULL; q1->next=p1;q1=p1;}
mergelinks(head,head1);}else if(j==5){printf("Enter the element you want to search\n");scanf("%d",&e);
linksearch(head,e);}else if(j==6){printf("Enter position\n");scanf("%d",&d);delet(head,d);}else if(j==7)
{sortll(head);}
else if(j==8)
{reverse(head);}}while(1);getch();}
void display(node *h){node *x;x=h;printf("LINKED LIST IS\n");while(x!=NULL){printf("%d\t",x->data);x=x->next;}}
void insanypos(node *h,int n){int n1=n;static int N;if(n1==1){node *p;p=(node*)malloc(sizeof(node)); printf("Enter element\n"); scanf("%d",&p->data);p->next=NULL;p->next=h; h=p;display(h);}
else if(n1==N){node *x,*p; while(x->next!=NULL) x=x->next;p=(node*)malloc(sizeof(node));
 printf("Enter element\n");scanf("%d",&p->data); x->next=p;p->next=NULL;display(h);}else
{node *x,*p;int i; p=(node*)malloc(sizeof(node)); printf("Enter element\n");scanf("%d",&p->data);
p->next=NULL;x=h;for(i=1;i<n-1;i++)x=x->next;p->next=x->next; x->next=p;display(h);}}
void reverseprint(node *h)
{node *x,*p;p=NULL;x=NULL;printf("LINKED LIST IS\n");while(p!=h)
{p=h;while(p->next!=x){p=p->next;}printf("%d\t",p->data);x=p;}}

void mergelinks(node *h,node *i){node *p;p=h;while(p->next!=NULL){p=p->next;}p->next=i;display(h);}
void linksearch(node *h,int n){node *q;int c=0;q=h;while(q->data!=n){q=q->next;c=c+1;}
printf("%d is present in %d th node",n,c+1);}
void delet(node *h,int n){node *q,*p;int i;if(n==1){p=h;h=h->next;p->next=NULL;free(p);}
else if(n==5){q=h;while(q->next!=NULL){q=q->next;}p=h;while(p->next!=q){p=p->next;}p->next=NULL;
free(q);}
else{p=h;for(i=1;i<=(n-2);i++){p=p->next;}q=p->next;p->next=q->next;q->next=NULL;free(q);}display(h);}
void sortll(node *h){node *p,*q;int t,c=0,i;p=h;while(p->next!=NULL){p=p->next;c=c+1;}for(i=1;i<=c;i++){p=h;while(p->next!=NULL){q=p->next;if((p->data)>(q->data)){t=p->data;p->data=(q->data);(q->data)=t;}p=p->next;}}display(h);}
void reverse(node *h){node *p,*q,*r;p=NULL;q=h;r=h->next;while(q!=NULL){q->next=p;p=q;q=r;r=r->next;
}h=p;printf("After REVERSING\n");display(h);}
